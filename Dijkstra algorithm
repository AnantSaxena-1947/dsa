// https://www.codingninjas.com/codestudio/problems/dijkstra-s-shortest-path_920469?leftPanelTab=0&utm_source=youtube&utm_medium=affiliate&utm_campaign=Lovebabbar

// shortest path Algorithm
// Source node to all nodes
// For undirected weighted graph

// T.C : O(ElogV)
// S.C : O(V+E)

// Using set

#include <bits/stdc++.h> 
vector<int> dijkstra(vector<vector<int>> &vec, int vertices, int edges, int source) {
//     create adjacency list
    unordered_map<int,list<pair<int,int> > > adj;
    
    for(int i = 0;i<edges;i++){
        int u = vec[i][0];
        int v = vec[i][1];
        int w = vec[i][2];
        
        adj[u].push_back(make_pair(v,w));
        adj[v].push_back(make_pair(u,w));
    }
    
//     creation of distance array with infinite value initially
    vector<int> dist(vertices);
    for(int i = 0;i<vertices;i++){
        dist[i] = INT_MAX;
    }
    
//     creation of set on basis (distance,node)
    set<pair<int,int> > st;
    
//     initialise distance and set with source node
    dist[source] = 0;
    st.insert(make_pair(0,source));
    
//     Main logic
    while(!st.empty()){
//         fetch top record with minimum distance
        auto top = *(st.begin());
        
        int nodeDist = top.first;
        int topNode = top.second;
        
//         remove top record now
        st.erase(st.begin());
        
//         traverse on neighbours
        for(auto i:adj[topNode]){
            if(nodeDist + i.second < dist[i.first]){
                
                auto record = st.find(make_pair(dist[i.first],i.first));
//                 if record found, then erase it
                if(record != st.end()){
                    st.erase(record);
                }
                
//                 distance update
                dist[i.first] = nodeDist + i.second;
                
//                 record push in set
                st.insert(make_pair(dist[i.first],i.first));
            }
        }
    }
    return dist;
}


// Using Min heap

// https://practice.geeksforgeeks.org/problems/implementing-dijkstra-set-1-adjacency-matrix/1

void dijkstra(int src,vector<vector<int>> adj[],vector<int> &dist)

    {

        dist[src] = 0;
    
    priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq;

        pq.push({0,src});

        while(!pq.empty())
        {
            int node = pq.top().second;
            int distance = pq.top().first;

            pq.pop();

            for(auto ele : adj[node])
            {
                int adj_node = ele[0];
                int weight = ele[1];

                if(dist[adj_node] > weight + distance)
                {
                    dist[adj_node] = weight + distance;
                    pq.push({dist[adj_node],adj_node});
                }
            }
        }
    }

    vector <int> dijkstra(int V, vector<vector<int>> adj[], int S)
    {

        vector<int> dist(V,1e9);

        dijkstra(S,adj,dist);
        return dist;

    }
